{
  "manifest": {
    "name": "printf",
    "version": "0.3.0",
    "description": "Full implementation of the `printf` family in pure JS.",
    "keywords": [
      "printf",
      "formatting",
      "sprintf",
      "format",
      "output",
      "print"
    ],
    "homepage": "http://www.adaltas.com/projects/node-printf",
    "license": "BSD-3-Clause",
    "author": {
      "name": "David Worms",
      "email": "david@adaltas.com"
    },
    "maintainers": [
      {
        "name": "David Worms",
        "email": "david@adaltas.com"
      }
    ],
    "contributors": [
      {
        "name": "David Worms",
        "email": "david@adaltas.com"
      },
      {
        "name": "Aluísio Augusto Silva Gonçalves",
        "email": "aluisio@aasg.name"
      },
      {
        "name": "Xavier Mendez",
        "email": "jmendeth@gmail.com"
      },
      {
        "name": "LLeo",
        "email": "lleoem@gmail.com"
      },
      {
        "name": "Derrell Lipman",
        "email": "https://github.com/derrell"
      }
    ],
    "main": "./lib/printf",
    "types": "./typings/printf.d.ts",
    "engines": {
      "node": ">= 0.9.0"
    },
    "scripts": {
      "preversion": "grep '## Trunk' CHANGELOG.md && npm test",
      "version": "version=`grep '^  \"version\": ' package.json | sed 's/.*\"\\([0-9\\.]*\\)\".*/\\1/'` && sed -i \"s/## Trunk/## Version $version/\" CHANGELOG.md && git add CHANGELOG.md",
      "postversion": "git push origin master && git push origin master --tags && npm publish",
      "patch": "npm version patch -m 'Bump to version %s'",
      "minor": "npm version minor -m 'Bump to version %s'",
      "major": "npm version major -m 'Bump to version %s'",
      "test": "mocha test/**/*.coffee"
    },
    "devDependencies": {
      "coffeescript": "^2.2.4",
      "should": "13.2.1",
      "mocha": "5.1.0",
      "semver": "5.5.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/adaltas/node-printf.git"
    },
    "bugs": {
      "url": "https://github.com/adaltas/node-printf/issues"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-printf-0.3.0-6918ca5237c047e19cf004b69e6bcfafbef1ce82-integrity/node_modules/printf/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Build Status](https://secure.travis-ci.org/adaltas/node-printf.png)](http://travis-ci.org/adaltas/node-printf)\n\nA complete implementation of the **`printf` C functions family**\nfor [Node.JS][node], written in pure JavaScript.\n\n**Bonus!** You get extra features, like the `%O` converter (which `inspect`s\nthe argument). See [Extra Features](#extra-features) below.\n\n[![NPM](https://nodei.co/npm/printf.png?stars&downloads)](https://nodei.co/npm/printf/) [![NPM](https://nodei.co/npm-dl/printf.png)](https://nodei.co/npm/printf/)\n\nInstalling\n----------\n\nVia [NPM][npm]:\n\n``` bash\n$ npm install printf\n```\n\nUsage\n-----\n\nUse it like you would in C (`printf`/`sprintf`):\n\n``` javascript\nvar printf = require('printf');\nvar result = printf(format, args...);\n```\n\nIt can also output the result for you, as `fprintf`:\n\n``` javascript\nvar printf = require('printf');\nprintf(write_stream, format, args...);\n```\n\n## Features\n\n### Flag ` ` (space)\n\n``` javascript\nassert.eql('  -42', printf('% 5d', -42));\n```\n\n### Flag `+` (plus)\n\n``` javascript\nassert.eql('  +42', printf('%+5d', 42));\n```\n\n### Flag `0` (zero)\n\n``` javascript\nassert.eql('00042', printf('%05d', 42));\n```\n\n### Flag `-` (minus)\n\n``` javascript\nassert.eql('42   ', printf('%-5d', 42));\n```\n\n### Width / precision\n\n``` javascript\nassert.eql('42.90', printf('%.2f', 42.8952));\nassert.eql('042.90', printf('%06.2f', 42.8952));\n```\n\n### Numerical bases\n\n``` javascript\nassert.eql('\\x7f', printf('%c', 0x7f));\nassert.eql('a', printf('%c', 'a'));\nassert.eql('\"', printf('%c', 34));\n```\n\n### Miscellaneous\n\n``` javascript\nassert.eql('10%', printf('%d%%', 10));\nassert.eql('+hello+', printf('+%s+', 'hello'));\nassert.eql(\"a\", printf(\"%c\", \"a\"));\nassert.eql('\"', printf(\"%c\", 34));\nassert.eql('$', printf('%c', 36));\nassert.eql(\"10\", printf(\"%d\", 10));\n```\n\nExtra features!\n---------------\n\n### Inspector\n\nThe `%O` converter will call [`util.inspect(...)`][util_inspect] at the argument:\n\n``` javascript\nassert.eql(\"Debug: { hello: 'Node', repeat: false }\",\n  printf('Debug: %O', {hello: 'Node', \"repeat\": false})\n);\nassert.eql(\"Test: { hello: 'Node' }\",\n  printf('%2$s: %1$O', {\"hello\": 'Node'}, 'Test')\n);\n```\n\n**Important:** it's a capital \"O\", *not* a zero!\n\nSpecifying a precision lets you control the depth up to which the object is formatted:\n\n``` javascript\nassert.eql(\"Debug: { depth0: { depth1_: 0, depth1: [Object] } }\",\n  printf('Debug: %.1O', {depth0: {depth1: {depth2: {depth3: true}}, depth1_: 0}})\n);\n```\n\nYou can use the alternative form flag together with `%O` to disable representation of non-enumerable properties (useful for arrays):\n\n``` javascript\nassert.eql(\"With non-enumerable properties: [ 1, 2, 3, 4, 5, [length]: 5 ]\",\n  printf('With non-enumerable properties: %O', [1, 2, 3, 4, 5])\n);\nassert.eql(\"Without non-enumerable properties: [ 1, 2, 3, 4, 5 ]\",\n  printf('Without non-enumerable properties: %#O', [1, 2, 3, 4, 5])\n);\n```\n\n### Argument mapping\n\nIn addition to the old-fashioned `n$`,\nyou can use **hashes** and **property names**!\n\n``` javascript\nassert.eql('Hot Pockets',\n  printf('%(temperature)s %(crevace)ss', {\n    temperature: 'Hot',\n    crevace: 'Pocket'\n  })\n);\nassert.eql('Hot Pockets',\n  printf('%2$s %1$ss', 'Pocket', 'Hot')\n);\n```\n\n### Positionals\n\nLenght and precision can now be variable:\n\n``` javascript\nassert.eql(' foo', printf('%*s', 'foo', 4));\nassert.eql('      3.14', printf('%*.*f', 3.14159265, 10, 2));\nassert.eql('000003.142', printf('%0*.*f', 3.14159265, 10, 3));\nassert.eql('3.1416    ', printf('%-*.*f', 3.14159265, 10, 4));\n```\n\nDevelopment\n-----------\n\nTests are written in [CoffeeScript][coffee] executed with [Mocha][mocha]. To use it, simple run `npm install`, it will install\nMocha and its dependencies in your project's `node_modules` directory followed by `npm test`.\n\nTo run the tests:\n\n```bash\nnpm install\nnpm test\n```\n\nThe test suite is run online with [Travis][travis] against the versions 0.9, 0.10 and 0.11 of \nNode.js.\n\nContributors\n------------\n\n*   David Worms <https://github.com/wdavidw>\n*   Aluísio Augusto Silva Gonçalves <https://github.com/AluisioASG>\n*   Xavier Mendez <https://github.com/jmendeth>\n*   LLeo <https://github.com/lleo>\n*   Derrell Lipman <https://github.com/derrell>\n\n\n[dojo]: http://www.dojotoolkit.org  \"The Dojo Toolkit\"\n[node]: http://nodejs.org \"The Node.JS platform\"\n[npm]:  https://github.com/isaacs/npm \"The Node Package Manager\"\n[util_inspect]: http://nodejs.org/api/util.html#util_util_inspect_object_showhidden_depth_colors \"util.inspect() documentation\"\n[expresso]: http://visionmedia.github.com/expresso \"The Expresso TDD\"\n[travis]: https://travis-ci.org \"Continuous Integration system\"\n[mocha]: http://mochajs.org/ \"The Mocha test framework\"\n[coffee]: http://coffeescript.org/\n",
    "licenseText": "Copyright (c) 2008-2010, SARL Adaltas.\nAll rights reserved.\n\nRedistribution and use of this software in source and binary forms, with or\nwithout modification, are permitted provided that the following conditions\nare met:\n\n - Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n - Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n - Neither the name of SARL Adaltas nor the names of its contributors may be\n   used to endorse or promote products derived from this software without\n   specific prior written permission of SARL Adaltas.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/printf/-/printf-0.3.0.tgz#6918ca5237c047e19cf004b69e6bcfafbef1ce82",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/printf/-/printf-0.3.0.tgz",
    "hash": "6918ca5237c047e19cf004b69e6bcfafbef1ce82",
    "integrity": "sha512-DlJSroT2n9nkh47D4T6BHFQvsMR0L41889ECLmdbzk2BlhN0t31/vl5mHvlWiNBCNQrqG9XfpXwqmJQ2utoYwg==",
    "registry": "npm",
    "packageName": "printf",
    "cacheIntegrity": "sha512-DlJSroT2n9nkh47D4T6BHFQvsMR0L41889ECLmdbzk2BlhN0t31/vl5mHvlWiNBCNQrqG9XfpXwqmJQ2utoYwg== sha1-aRjKUjfAR+Gc8AS2nmvPr77xzoI="
  },
  "registry": "npm",
  "hash": "6918ca5237c047e19cf004b69e6bcfafbef1ce82"
}