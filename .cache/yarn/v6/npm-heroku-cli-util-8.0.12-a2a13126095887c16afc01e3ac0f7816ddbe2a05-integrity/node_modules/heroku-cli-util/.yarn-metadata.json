{
  "manifest": {
    "name": "heroku-cli-util",
    "description": "Set of helpful CLI utilities",
    "version": "8.0.12",
    "author": {
      "name": "Jeff Dickey",
      "url": "@dickeyxxx"
    },
    "bugs": {
      "url": "https://github.com/heroku/heroku-cli-util/issues"
    },
    "dependencies": {
      "@heroku-cli/color": "^1.1.3",
      "ansi-escapes": "^3.1.0",
      "ansi-styles": "^3.2.1",
      "cardinal": "^2.0.1",
      "chalk": "^2.4.1",
      "co": "^4.6.0",
      "got": "^8.3.1",
      "heroku-client": "^3.1.0",
      "lodash": "^4.17.10",
      "netrc-parser": "^3.1.4",
      "opn": "^3.0.3",
      "strip-ansi": "^4.0.0",
      "supports-color": "^5.4.0",
      "tslib": "^1.9.0",
      "tunnel-agent": "^0.6.0"
    },
    "devDependencies": {
      "chai": "^4.1.2",
      "codeclimate-test-reporter": "^0.5.0",
      "hook-std": "^0.4.0",
      "mocha": "^5.1.1",
      "mocha-junit-reporter": "^1.17.0",
      "nock": "^9.0.4",
      "nyc": "^11.7.3",
      "proxyquire": "^1.7.11",
      "sinon": "^1.17.7",
      "standard": "^11.0.1",
      "tmp": "^0.0.33",
      "unexpected": "^10.37.7"
    },
    "engines": {
      "node": ">= 6.0.0"
    },
    "files": [
      "lib",
      "index.js"
    ],
    "homepage": "https://github.com/heroku/heroku-cli-util",
    "license": "ISC",
    "main": "index.js",
    "nyc": {
      "exclude": [
        "lib/linewrap.js"
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/heroku/heroku-cli-util.git"
    },
    "scripts": {
      "test": "mocha",
      "posttest": "standard"
    },
    "standard": {
      "env": "mocha",
      "ignore": [
        "lib/linewrap.js"
      ]
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-heroku-cli-util-8.0.12-a2a13126095887c16afc01e3ac0f7816ddbe2a05-integrity/node_modules/heroku-cli-util/package.json",
    "readmeFilename": "README.md",
    "readme": "# heroku-cli-util [![Circle CI](https://circleci.com/gh/heroku/heroku-cli-util/tree/master.svg?style=svg)](https://circleci.com/gh/heroku/heroku-cli-util/tree/master)\n\n[![Code Climate](https://codeclimate.com/github/heroku/heroku-cli-util/badges/gpa.svg)](https://codeclimate.com/github/heroku/heroku-cli-util)\n[![Test Coverage](https://codeclimate.com/github/heroku/heroku-cli-util/badges/coverage.svg)](https://codeclimate.com/github/heroku/heroku-cli-util/coverage)\n[![npm version](https://badge.fury.io/js/heroku-cli-util.svg)](http://badge.fury.io/js/heroku-cli-util)\n[![License](https://img.shields.io/github/license/heroku/heroku-cli-util.svg)](https://github.com/heroku/heroku-cli-util/blob/master/LICENSE)\n\nSet of helpful CLI utilities\n\n## Installation\n\n```sh\nnpm install heroku-cli-util --save\n```\n\n## Action\n\n```js\nlet cli = require('heroku-cli-util');\nyield cli.action('restarting dynos', co(function* () {\n  let app = yield heroku.get(`/apps/${context.app}`);\n  yield heroku.request({method: 'DELETE', path: `/apps/${app.name}/dynos`});\n}));\n\n// restarting dynos... done\n```\n\n## Prompt\n\n```js\nlet cli   = require('heroku-cli-util');\nlet email = yield cli.prompt('email', {});\nconsole.log(`your email is: ${email}`);\n```\n\n**cli.prompt options**\n\n```js\ncli.prompt('email', {\n  mask: true, // mask input field after submitting\n  hide: true // mask characters while entering\n});\n```\n\n## Confirm App\n\nSupports the same async styles as `prompt()`. Errors if not confirmed.\n\nBasic\n\n```js\nlet cli = require('heroku-cli-util');\nyield cli.confirmApp('appname', context.flags.confirm);\n\n// !     WARNING: Destructive Action\n// !     This command will affect the app appname\n// !     To proceed, type appname or re-run this command with --confirm appname\n\n> appname\n```\n\nCustom message\n\n```js\nlet cli = require('heroku-cli-util');\nyield cli.confirmApp('appname', context.flags.confirm, 'foo');\n\n// !     foo\n// !     To proceed, type appname or re-run this command with --confirm appname\n\n> appname\n```\n\nNote that you will still need to define a `confirm` flag for your command.\n\n## Errors\n\n```js\nlet cli = require('heroku-cli-util');\ncli.error(\"App not found\");\n// !    App not found\n```\n\n## Warnings\n\n```js\nlet cli = require('heroku-cli-util');\ncli.warn(\"App not found\");\n// !    App not found\n```\n\n## Dates\n\n```js\nlet cli = require('heroku-cli-util');\nlet d   = new Date();\nconsole.log(cli.formatDate(d));\n// 2001-01-01T08:00:00.000Z\n```\n\n## Hush\n\nUse hush for verbose logging when `HEROKU_DEBUG=1`.\n\n```js\nlet cli = require('heroku-cli-util');\ncli.hush('foo');\n// only prints if HEROKU_DEBUG is set\n```\n\n## Debug\n\nPretty print an object.\n\n```js\nlet cli = require('heroku-cli-util');\ncli.debug({foo: [1,2,3]});\n// { foo: [ 1, 2, 3 ] }\n```\n\n## Stylized output\n\nPretty print a header, hash, and JSON\n```js\nlet cli = require('heroku-cli-util');\ncli.styledHeader(\"MyApp\");\ncli.styledHash({name: \"myapp\", collaborators: [\"user1@example.com\", \"user2@example.com\"]});\ncli.styledJSON({name: \"myapp\"});\n```\n\nProduces\n\n```\n=== MyApp\nCollaborators: user1@example.com\n               user1@example.com\nName:          myapp\n\n{\n  \"name\": \"myapp\"\n}\n```\n\n## Table\n\n```js\ncli.table([\n  {app: 'first-app',  language: 'ruby', dyno_count: 3},\n  {app: 'second-app', language: 'node', dyno_count: 2},\n], {\n  columns: [\n    {key: 'app'},\n    {key: 'dyno_count', label: 'Dyno Count'},\n    {key: 'language', format: language => cli.color.red(language)},\n  ]\n});\n```\n\nProduces:\n\n```\napp         Dyno Count  language\n──────────  ──────────  ────────\nfirst-app   3           ruby\nsecond-app  2           node\n```\n\n## Linewrap\n\nUsed to indent output with wrapping around words:\n\n```js\ncli.log(cli.linewrap(2, 10, 'this is text is longer than 10 characters'));\n// Outputs:\n//\n// this\n// text is\n//  longer\n//  than 10\n//  characters`);\n```\n\nUseful with `process.stdout.columns || 80`.\n\n## Open Web Browser\n\n```js\nyield cli.open('https://github.com');\n```\n\n## HTTP calls\n\n`heroku-cli-util` includes an instance of [got](https://www.npmjs.com/package/got) that will correctly use HTTP proxies.\n\n```js\nlet cli = require('heroku-cli-util');\nlet rsp = yield cli.got('https://google.com');\n```\n\n## Mocking\n\nMock stdout and stderr by using `cli.log()` and `cli.error()`.\n\n```js\nlet cli = require('heroku-cli-util');\ncli.log('message 1'); // prints 'message 1'\ncli.mockConsole();\ncli.log('message 2'); // prints nothing\ncli.stdout.should.eq('message 2\\n');\n```\n\n## Command\n\nUsed for initializing a plugin command.\ngive you an auth'ed instance of `heroku-client` and cleanly handle API exceptions.\n\nIt expects you to return a promise chain. This is usually done with [co](https://github.com/tj/co).\n\n```js\nlet cli = require('heroku-cli-util');\nlet co  = require('co');\nmodule.exports.commands = [\n  {\n    topic: 'apps',\n    command: 'info',\n    needsAuth: true,\n    needsApp: true,\n    run: cli.command(function (context, heroku) {\n      return co(function* () {\n        let app = yield heroku.get(`/apps/${context.app}`);\n        console.dir(app);\n      });\n    })\n  }\n];\n```\n\nWith options:\n\n```js\nlet cli = require('heroku-cli-util');\nlet co  = require('co');\nmodule.exports.commands = [\n  {\n    topic: 'apps',\n    command: 'info',\n    needsAuth: true,\n    needsApp: true,\n    run: cli.command(\n      {preauth: true},\n      function (context, heroku) {\n        return co(function* () {\n          let app = yield heroku.get(`/apps/${context.app}`);\n          console.dir(app);\n        });\n      }\n    )\n  }\n];\n```\n\nIf the command has a `two_factor` API error, it will ask the user for a 2fa code and retry.\nIf you set `preauth: true` it will preauth against the current app instead of just setting the header on an app. (This is necessary if you need to do more than 1 API call that will require 2fa)\n\n## Tests\n\n```sh\nnpm install\nnpm test\n```\n\n## License\n\nISC\n",
    "licenseText": "Copyright (c) 2016, Heroku\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/heroku-cli-util/-/heroku-cli-util-8.0.12.tgz#a2a13126095887c16afc01e3ac0f7816ddbe2a05",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/heroku-cli-util/-/heroku-cli-util-8.0.12.tgz",
    "hash": "a2a13126095887c16afc01e3ac0f7816ddbe2a05",
    "integrity": "sha512-63wB17oSktlA/HzpIV/PGe8Isq5AZArT51KAW1gg54zyYRIiHOwXik93HZuuRVUaVrWvVUhItFeLgqMwAwlTsw==",
    "registry": "npm",
    "packageName": "heroku-cli-util",
    "cacheIntegrity": "sha512-63wB17oSktlA/HzpIV/PGe8Isq5AZArT51KAW1gg54zyYRIiHOwXik93HZuuRVUaVrWvVUhItFeLgqMwAwlTsw== sha1-oqExJglYh8Fq/AHjrA94Ft2+KgU="
  },
  "registry": "npm",
  "hash": "a2a13126095887c16afc01e3ac0f7816ddbe2a05"
}