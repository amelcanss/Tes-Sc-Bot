{
  "manifest": {
    "name": "heroku-client",
    "description": "A wrapper for the Heroku v3 API",
    "version": "3.1.0",
    "author": {
      "name": "Jeff Dickey"
    },
    "bugs": {
      "url": "https://github.com/heroku/node-heroku-client/issues"
    },
    "contributors": [
      {
        "name": "Jonathan Clem"
      },
      {
        "name": "Jeff Dickey"
      },
      {
        "name": "Ray McDermott"
      },
      {
        "name": "Bob Zoller"
      },
      {
        "name": "Sehrope Sarkuni"
      }
    ],
    "dependencies": {
      "is-retry-allowed": "^1.0.0",
      "tunnel-agent": "^0.6.0"
    },
    "devDependencies": {
      "ava": "^0.18.0",
      "debug": "^3.1.0",
      "nock": "^11.7.0",
      "nyc": "^11.3.0",
      "standard": "^10.0.3",
      "stdout-stderr": "^0.1.9"
    },
    "engines": {
      "node": ">=6.0.0"
    },
    "files": [
      "lib"
    ],
    "keywords": [
      "heroku"
    ],
    "license": "MIT",
    "main": "lib/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/heroku/node-heroku-client"
    },
    "scripts": {
      "test": "nyc ava && standard"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-heroku-client-3.1.0-7e3f6804d18a6ee9e3a774ff8bc9861b9b1a4725-integrity/node_modules/heroku-client/package.json",
    "readmeFilename": "README.md",
    "readme": "# heroku-client\n\n[![Build Status](https://travis-ci.org/heroku/node-heroku-client.png?branch=master)](https://travis-ci.org/heroku/node-heroku-client)\n[![codecov](https://codecov.io/gh/heroku/node-heroku-client/branch/master/graph/badge.svg)](https://codecov.io/gh/heroku/node-heroku-client)\n[![Code Climate](https://codeclimate.com/github/heroku/node-heroku-client/badges/gpa.svg)](https://codeclimate.com/github/heroku/node-heroku-client)\n\nA wrapper around the [v3 Heroku API][platform-api-reference].\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Generators](#generators)\n  - [HTTP Proxies](#http-proxies)\n- [Caching](#caching)\n  - [Custom caching](#custom-caching)\n- [Contributing](#contributing)\n  - [Running tests](#running-tests)\n\n## Install\n\n```sh\n$ npm install heroku-client --save\n```\n\n## Usage\n\nTo begin, require the Heroku module and create a client, passing in an API\ntoken:\n\n```javascript\nconst Heroku = require('heroku-client')\nconst heroku = new Heroku({ token: process.env.HEROKU_API_TOKEN })\n```\n\nheroku-client has `get`, `post`, `patch`, and `delete` functions which can make\nrequests with the specified HTTP method to any endpoint:\n\n```javascript\n\n// GET requests\nheroku.get('/apps').then(apps => {\n  // do something with apps\n})\n\n// POST requests\nheroku.post('/apps').then(app => {})\n\n// POST requests with body\nheroku.post('/apps', {body: {name: 'my-new-app'}}).then(app => {})\n\n// PATCH requests with body\nheroku.patch('/apps/my-app', {body: {name: 'my-renamed-app'}}).then(app => {})\n\n// DELETE requests\nheroku.delete('/apps/my-old-app').then(app => {})\n```\n\nThere is also an even more generic `request` function that can accept many more\noptions:\n\n```javascript\nheroku.request({\n  method: 'GET',\n  path: '/apps',\n  headers: {\n    'Foo': 'Bar'\n  },\n  parseJSON: false\n}).then(response => {})\n```\n\n### Generators\n\nIt's easy to get heroku-client working with [generators][generators]. In this\nexample, I'll use the [co][co] library to wrap a function that will get the list\nof all of my apps, and then get the dynos for each of those apps:\n\n```javascript\nconst co     = require('co')\nconst heroku = require('heroku-client')\nconst hk     = heroku.createClient({ token: process.env.HEROKU_API_KEY })\n\nlet main = function * () {\n  let apps  = yield hk.get('/apps')\n  let dynos = yield apps.map(getDynos)\n\n  console.log(dynos)\n\n  function getDynos(app) {\n    return hk.get(`/apps/${app.name}/dynos`)\n  }\n}\n\nco(main)()\n```\n\nHooray, no callbacks or promises in sight!\n\n### HTTP Proxies\n\nIf you'd like to make requests through an HTTP proxy, set the\n`HEROKU_HTTP_PROXY_HOST` environment variable with your proxy host, and\n`HEROKU_HTTP_PROXY_PORT` with the desired port (defaults to 8080). heroku-client\nwill then make requests through this proxy instead of directly to\napi.heroku.com.\n\n## Caching\n\nheroku-client can optionally perform caching of API requests.\n\nheroku-client will cache any response from the Heroku API that comes with an\n`ETag` header, and each response is cached individually (i.e. even though the\nclient might make multiple calls for a user's apps and then aggregate them into\na single JSON array, each required API call is individually cached). For each\nAPI request it performs, heroku-client sends an `If-None-Match` header if there\nis a cached response for the API request. If API returns a 304 response code,\nheroku-client returns the cached response. Otherwise, it writes the new API\nresponse to the cache and returns that.\n\nTo tell heroku-client to perform caching, add a config object to the options\nwith store and encryptor objects. These can be instances of memjs and\nsimple-encryptor, respectively.\n\n```js\nvar Heroku    = require('heroku-client');\nvar memjs     = require('memjs').Client.create();\nvar encryptor = require('simple-encryptor')(SECRET_CACHE_KEY);\nvar hk        = new Heroku({\n  cache: { store: memjs, encryptor: encryptor }\n});\n```\n\n### Custom caching\n\nAlternatively you can specify a custom cache implementation. Your custom implementation must define `get(key, cb(err, value))` and `set(key, value)` functions.\n\nHere's a sample implementation that uses Redis to cache API responses for 5-minutes each:\n\n```javascript\nvar redis        = require('redis');\nvar client       = redis.createClient();\nvar cacheTtlSecs = 5 * 60; // 5 minutes\n\nvar redisStore = {\n  get: function(key, cb) {\n    // Namespace the keys:\n    var redisKey = 'heroku:api:' + key;\n    client.GET(redisKey, cb);\n  },\n\n  set: function(key, value) {\n    // Namespace the keys:\n    var redisKey = 'heroku:api:' + key;\n    client.SETEX(redisKey, cacheTtlSecs, value, function(err) {\n      // ignore errors on set\n    });\n  }\n};\n\nvar encryptor = require('simple-encryptor')(SECRET_CACHE_KEY);\nvar Heroku    = require('heroku-client');\nvar hk        = new Heroku({\n  cache: {store: redisStore, encryptor: encryptor}\n});\n```\n\n## Contributing\n\nInspect your changes, and\n[bump the version number accordingly](http://semver.org/) when cutting a\nrelease.\n\n### Running tests\n\nheroku-client uses [ava](https://github.com/avajs/ava) for tests:\n\n```bash\n$ npm test\n```\n\n[platform-api-reference]: https://devcenter.heroku.com/articles/platform-api-reference\n[memjs]: https://github.com/alevy/memjs\n[generators]: https://github.com/JustinDrake/node-es6-examples#generators\n[co]: https://github.com/visionmedia/co\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013 Heroku\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/heroku-client/-/heroku-client-3.1.0.tgz#7e3f6804d18a6ee9e3a774ff8bc9861b9b1a4725",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/heroku-client/-/heroku-client-3.1.0.tgz",
    "hash": "7e3f6804d18a6ee9e3a774ff8bc9861b9b1a4725",
    "integrity": "sha512-UfGKwUm5duzzSVI8uUXlNAE1mus6uPxmZPji4vuG1ArV5DYL1rXsZShp0OoxraWdEwYoxCUrM6KGztC68x5EZQ==",
    "registry": "npm",
    "packageName": "heroku-client",
    "cacheIntegrity": "sha512-UfGKwUm5duzzSVI8uUXlNAE1mus6uPxmZPji4vuG1ArV5DYL1rXsZShp0OoxraWdEwYoxCUrM6KGztC68x5EZQ== sha1-fj9oBNGKbunjp3T/i8mGG5saRyU="
  },
  "registry": "npm",
  "hash": "7e3f6804d18a6ee9e3a774ff8bc9861b9b1a4725"
}